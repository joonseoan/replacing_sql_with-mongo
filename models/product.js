// To get class to generate 'id' intance
const { ObjectId } = require('mongodb');

// tracking the connection availability
const { getDb } = require('../utils/database');

class Product {
    // In this case, 'id' can be null because it is spotted at the last.
    constructor(title, imageUrl, description, price, id, userId) {

        this.title = title;
        this.imageUrl = imageUrl;
        this.description = description;
        this.price = price;

        // must use ObjectId over here.
        //  otherwise, the {$set : this } including  this.id would still stay string
        // this.id = id;

        // must be a same name as '_id'.
        // If it is 'id', 'id', not '_id' will be created.**************
        
        // as long as we use the new ObjectId here, 
        // even if id parameter is a null, the object is not going to be anull.
        //  Therefore, in order to insert a new prodcut which requires null value,
        //  we need to define the condition like below.
        this._id = id ? new ObjectId(id) : null;
        // it is not id of this document. do not need to use '_userId'
        this.userId = userId;

    }

    save() {
        
        // check db connection
        const db = getDb();
        
        let dbOp;

        // for update
        if(this._id) {
            // updateMany can be used...
            dbOp = db.collection('products').updateOne({ 
                // find the existing doc
                // It is an ObjectId
                _id: this._id
            }, {
                // update the doc fields (all fields here)
                // this includes this.id which is an ObjectId.
                $set: this
            });

            console.log('Just updated!!');
 
        // for insert a new data
        } else {
            dbOp = db.collection('products').insertOne(this);
            console.log('Just saved!!');

        }

        // Then, create a collection, products here.
        //  by inserting a doc data.
        // Or otherwise, update the exsiting doc.
        return dbOp.then(res => {
            
            console.log('Done !!');
            // console.log('res ======================================> ', res)
            // do not need to return res data here
            // return res;
         })
        .catch(e => console.log(e));
        
    }

    static fetchAll() {
        const db = getDb();
        // For reference, find({ title : 'a book' }) can be used to filte a specific data out of collection.
        return db.collection('products').find()
            // turn the find() returns into an array
            .toArray()
            .then(products => {
                return products; // array
            })
            .catch(e => console.log(e))
    }

    static findById(id) {
        const db = getDb();
        // next() : mongodb still gives us a cursor after find()
        //  because mongoDB does not know we tried to get a single one.
        // next() will make it jump to the next then() once it gets a single one.
        // Or otherwise without next(), it will stay and tries to fetch another doc.
        
        // mongoDB _id : it is an object which means that it is generated by ObjectId class.
        // find({ _id: id }) : here we compare string with an object.
        // return db.collection('products').find({ _id: id }).next()

        return db.collection('products').find({ _id : new ObjectId (id) }).next()
            .then(product => {
                console.log('product : ===========================>', product)
                return product;
            })
            .catch(e => { throw new Error ('Unable to get a product.'); });
    }

    static deleteById(id) {
        const db = getDb();
        // two options: deleteOne / deleteMany
        return db.collection('products').deleteOne({ _id: new ObjectId(id) })
            .then(product => {
                console.log('Successfully deleted!!!');
            })
            .catch(e => { throw new Error('Unable to delete the document.'); });
    }
}

module.exports = Product;